####Macros
#####################################################################
[gcode_macro backup_update_git]
gcode:
    RUN_SHELL_COMMAND CMD=update_git_script


#''''''''''''''''''''''''''''''''
[gcode_macro _KNOMI_STATUS]
variable_homing: False
variable_probing: False
variable_qgling: False
variable_heating_nozzle: False
variable_heating_bed: False
gcode:

[gcode_macro M109]
rename_existing: M109.1
gcode:
  SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=heating_nozzle VALUE=True
  M109.1 {rawparams}
  SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=heating_nozzle VALUE=False

[gcode_macro M190]
rename_existing: M190.1
gcode:
  SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=heating_bed VALUE=True
  M190.1 {rawparams}
  SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=heating_bed VALUE=False



[gcode_macro BED_MESH_CALIBRATE]
rename_existing: BTT_BED_MESH_CALIBRATE
gcode:
  SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=probing VALUE=True
  BTT_BED_MESH_CALIBRATE
  SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=probing VALUE=False

# For printer with QGL
[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing: BTT_QUAD_GANTRY_LEVEL
gcode:
  SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=qgling VALUE=True
  BTT_QUAD_GANTRY_LEVEL
  SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=qgling VALUE=False

#####Start Print#############
#[gcode_macro START_PRINT]
#description: All what needs to be done at print end      
#gcode:
 #G28
#WIPE
   
  # SETUP_KAMP_MESHING [parameters]
       #STATUS_HEATING
    #{% set bed = params.BED|default() %}
   #NEOPIXEL_DISPLAY LED=my_neopixe2 TYPE=extruder_temp MODE=glow
   #G32                                      #Home
   #M83                                      ; Extruder relative mode
       #STATUS_HOMING  
   #G1 X0 Y0 F2200
   #{% set extruder = params.EXTRUDER|default() %}
   #M104 S{extruder}                         ; Extruder heat up standby temp 140
   #M190 S{bed}                              ; Bed heat up
   #M109 S{extruder}                         ; Extruder heat up to target temp

    #M117 ENABLING the Smart Filament Sensor
    #G92 E0
    #G90                                      ; Absolute positioning
    #PRIME_LINE
    #STATUS_BUSY
    #NEOPIXEL_DISPLAY LED=my_neopix2 TYPE=print_percent MODE=progress

  # G4 S120 SET_FILAMENT_SENSOR SENSOR=switch_sensor ENABLE=1 ; Put your filament sensor's name after SENSOR=
   #G4 S120 SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1 ; Put your filament sensor's name after SENSOR=

 ###--------------------------------------------------------------------------------------------------  
#[gcode_macro G32]
#gcode:
    #BED_MESH_CLEAR
    #STATUS_HOMING
    #G28 Z
     #  STATUS_CALIBRATING_Z    
   # QUAD_GANTRY_LEVEL
   # G28 Z
   #    STATUS_MESHING
    #BED_MESH_CALIBRATE
   # BED_MESH_PROFILE LOAD=default


########################################
# Nozzle Wipe Macro
######################################## 

[gcode_macro MMU_SYNC]
gcode:
  MMU_SYNC_GEAR_MOTOR

  
[servo wipeServo]
 pin: PB14
 minimum_pulse_width: 0.0005
maximum_pulse_width: 0.0025
initial_angle: 175
maximum_servo_angle: 180       

[gcode_macro NW_DEPLOY]
gcode:
    G90
    G0 Z{printer["gcode_macro NW_BUCKET_POS"].z}
    SET_SERVO SERVO=wipeServo ANGLE=15
    G4 P500

    
[gcode_macro NW_RETRACT]
gcode:
    SET_SERVO SERVO=wipeServo ANGLE=175
    #SET_SERVO SERVO=wipeServo WIDTH=0 # OFF
    G4 P500
    
#[gcode_macro WIPE]
#gcode:
# NW_DEPLOY
# G90                            # Use absolute coordinates
# G28                            # Home the printer 
# M109  S180
 #G1 X160 Y300 Z18 F6000         # Wipe routine
 #G92 E0
 #G4 P2000
 #G1 E10 F100
 #G1 Z26
# G4 P2000
 #G1 E20 F100
 #G1 E-15 F500
 #G1 X120 Y290 Z18 F8000
 #G1 X145 Y285 Z18 F8000
 #G1 X120 Y292 Z18 F8000
 #G1 X145 Y285 Z18 F8000
 #G1 X120 Y292 Z18 F8000
 #G1 X145 Y285 Z18 F8000
 #G1 X120 Y292 Z18 F8000
 #G1 X145 Y285 Z18 F8000
# G1 X120 Y292 Z18 F8000
 #G1 X145 Y285 Z18 F8000
 
 #G1 X100 Y300 Z25 F4000
 #NW_RETRACT
# G28 Z

################################################################
#[gcode_macro END_PRINT]
#description: All what needs to be done at print end
#gcode:
  #WIPE
    #TURN_OFF_HEATERS                         ; Turn off bed and nozzle
	#G91                                      ; Relative positioning
	#G1 E-10 F3000                             ; Retract
	#G1 X-0.5 Y-0.5 Z10 E-5                   ; Move a bit and retract filament even more
	#G90                                      ; Absolute positioning
	#G1 X295 Y295 F2200                         ; Move bed to front
   # M107                                     ; Turn off part fan
	#BED_MESH_CLEAR                           ; Clear session based mesh
	#M84                                      ; Steppers off
  	#G90                                      ; Absolute positioning
   # SET_FILAMENT_SENSOR SENSOR=switch_sensor ENABLE=0 ; Put your filament sensor's name after SENSOR=
   # SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0 ; Put your filament sensor's name after SENSOR=
   # LEDOFF
   # SET_FAN_SPEED FAN=exhaust_fan SPEED=0
   # TIMELAPSE_TAKE_FRAME
    #TIMELAPSE_RENDER
	#M117 Print done                          ; Send finish to display

##########################################################################################

[gcode_macro PRIME_LINE]
description: Do a prime line
gcode:

	G1 X5.0 Y5.0 F4500                       ; Move to front
	G0 Z0.3                                  ; Drop to bed
	G1 X250 E80 F500                         ; Extrude 50mm of filament in a 14cm line
	G1 E-1 F500
    G92 E0                                   ; Zero the extruded length
	#M221 S88								 ; 88% Flow!
#############################################################################################

###KNOMI-------------------------------
#[gcode_macro BED_MESH_CALIBRATE]
#rename_existing: BED_MESH_CALIBRATE_BASE
#variable_probing:False

#gcode:
 # SET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=probing VALUE=True
 # BED_MESH_CALIBRATE_BASE
  #SET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=probing VALUE=False
 

  
##test
#######
# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10

[gcode_macro TEST_SPEED]
gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    
    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x + bound %}
        {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set y_min = printer.toolhead.axis_minimum.y + bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound %}
    
    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
        
        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED
    
    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
    
    # Home and get position for comparison later:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28
        # QGL if not already QGLd (only if QGL section exists in config)
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL
                G28 Z
            {% endif %}
        {% endif %} 
        # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
        G90
        G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 X Y
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

    # Set new limits
    SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

    {% for i in range(iterations) %}
        # Large pattern diagonals
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        
        # Large pattern box
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
    
        # Small pattern diagonals
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        
        # Small patternbox
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

    # Re-home and get position again for comparison:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 # This is a full G28 to fix an issue with CoreXZ - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/12
        # Go to XY home positions (in case your homing override leaves it elsewhere)
        G90
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED
#############################################################
################################################


[gcode_macro MOTORAUS]
gcode: M84
#########################################################################################
[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
gcode:
    ##### set defaults #####
    {% set x = params.X|default(230) %}      #edit to your park position
    {% set y = params.Y|default(230) %}      #edit to your park position
    {% set z = params.Z|default(10)|float %} #edit to your park position
    {% set e = params.E|default(1) %}        #edit to your retract length
    ##### calculate save lift position #####
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% set lift_z = z|abs %}
    {% if act_z < (max_z - lift_z) %}
        {% set z_safe = lift_z %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}
  ##### end of definitions #####
   
    PAUSE_BASE
    G91
    {% if printer.extruder.can_extrude|lower == 'true' %}
      G1 E-{e} F2100
    {% else %}
      {action_respond_info("Extruder not hot enough")}
    {% endif %}
    {% if "xyz" in printer.toolhead.homed_axes %}    
      G1 Z{z_safe}
      G90
      G1 X{x} Y{y} F6000
    {% else %}
      {action_respond_info("Printer not homed")}
    {% endif %}
##########################################################################################



[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
    ##### set defaults #####
    {% set e = params.E|default(1) %} #edit to your retract length
    #### get VELOCITY parameter if specified ####
    {% if 'VELOCITY' in params|upper %}
      {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
    {%else %}
      {% set get_params = "" %}
    {% endif %}
    ##### end of definitions #####
    G91
    {% if printer.extruder.can_extrude|lower == 'true' %}
      G1 E{e} F2100
    {% else %}
      {action_respond_info("Extruder not hot enough")}
    {% endif %}  
    RESUME_BASE {get_params}

###########################################################################################
[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
    TURN_OFF_HEATERS
    CANCEL_PRINT_BASE

# SDCard 'looping' (aka Marlin M808 commands) support
#
# Support SDCard looping
[sdcard_loop]


##########################################################################################
#Below Macro with credit to Hywel Martin #https://github.com/KevinOConnor/klipper/issues/1354
[gcode_macro PARK_MACRO]

gcode:
   M117 PARKING..
   G91
   G1 E-3.14 F1500
   G1 Z200
   G90
   G1 X0 Y0 F3000
   G90
#########################################################################################
[gcode_macro M600]
gcode:
  PAUSE_MACRO
 # UNLOAD
#########################################################################################
[gcode_macro PAUSE_MACRO]
gcode:
  PAUSE
  PARK_MACRO
  SET_IDLE_TIMEOUT TIMEOUT=7200
#########################################################################################


#########################################################################################

########################################################################################

######################################################################
# PID MACRO
######################################################################

[gcode_macro PID_BED]
gcode:
  PID_CALIBRATE HEATER=heater_bed TARGET=60

[gcode_macro PID_Extruder]
gcode:
  PID_CALIBRATE HEATER=extruder TARGET=200




[gcode_macro MacroPIDExtruderFanOFF200]
gcode:  G28                
        M300
        G1 X0 Y0 Z2 F 3000      
        M300
        M107
        PID_CALIBRATE HEATER=extruder TARGET=200
        M300     
        G28 
        SAVE_CONFIG        
        M300    
        M18   
        M300               


      

#######################################################################


#####################################################################
[gcode_macro Wartungsposition]
gcode:
   # G28
    # Absolute mode on
    G90
    # Wartungskoordinate
    G1 X110 Y120 Z200 F1000
    # Relative Mode on
    G91
    # Turn off bed, extruder, and fan
    M140 S0
    M104 S0
    M106 S0
    # Disable steppers
    # M84

################
##LED
######################
[gcode_macro LEDOFF]
gcode:  SET_LED LED="my_neopixel_1" RED=0 GREEN=0 BLUE=0 SYNC=0 TRANSMIT=1
        {% set transmit=params.TRANSMIT|default(1) %}
    _set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}
      {% set transmit=params.TRANSMIT|default(1) %}
    _set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}
    
[gcode_macro LEDMAX]
gcode:  SET_LED LED="my_neopixel_1" RED=1 GREEN=1 BLUE=1 SYNC=0 TRANSMIT=1
       
[gcode_macro LEDMIN]
gcode:  SET_LED LED="my_neopixel_1" RED=0.25 GREEN=0.25 BLUE=0.25 SYNC=0 TRANSMIT=1
        set_nozzle_leds_off
[gcode_macro my_led_bedtemp]
gcode:
 NEOPIXEL_DISPLAY LED=my_neopixel_2 TYPE=bed_temp MODE=glow

[gcode_macro my_led_nozeltemp]
gcode:
  NEOPIXEL_DISPLAY LED=my_neopixel_2 TYPE=extruder_temp MODE=glow


   




######################################################################
# Filament Change
######################################################################



[pause_resume]

[gcode_macro M600]
gcode:
    {% set X = params.X|default(50)|float %}
    {% set Y = params.Y|default(0)|float %}
    {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91
    G1 E-.8 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    G1 E-50 F1000
    RESTORE_GCODE_STATE NAME=M600_state

[gcode_macro LOAD_FILAMENT]
gcode:
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET=240
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}
    SAVE_GCODE_STATE NAME=load_state
    M300 # beep
    G91
    G92 E0
    G1 E50 F{max_velocity} # fast-load
    G1 E-10 F{speed} # purge
   # M300
   # M300
    RESTORE_GCODE_STATE NAME=load_state

[gcode_macro UNLOAD_FILAMENT]
gcode:
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET=240
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}
    SAVE_GCODE_STATE NAME=unload_state
    G91
    M300 # beep
    G92 E0
    G1 E25 F{speed} # purge
    G1 E-50 F{max_velocity} # fast-unload
   # M300
   # M300
   RESTORE_GCODE_STATE NAME=unload_state


######################################################################
# PID MACRO
######################################################################

[gcode_macro PID_BED]
gcode:

  {% set pidbed = params.BED|default(100) %}
  PID_CALIBRATE HEATER=heater_bed TARGET={pidbed}

[gcode_macro PID_Extruder]
gcode:
  {% set pidextruder = params.EXTRUDER|default(220) %}
  PID_CALIBRATE HEATER=extruder TARGET={pidextruder}


######################################################################
# Motor Off
######################################################################

[gcode_macro Motor_aus]
gcode:
  M18

######################################################################
# Inputshaper
######################################################################

[gcode_macro IS_Test]
gcode:
  ACCELEROMETER_QUERY
[gcode_macro IS_Auto]
gcode:
 G28
 SHAPER_CALIBRATE

[gcode_macro IS_X_Achse]
gcode:
  G28
  TEST_RESONANCES AXIS=X

[gcode_macro IS_Y_Achse]
gcode:
  G28
  TEST_RESONANCES AXIS=Y





